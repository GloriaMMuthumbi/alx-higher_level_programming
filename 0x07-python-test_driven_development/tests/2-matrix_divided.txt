==============================
How to Use 2-matrix_divided.py
==============================

Module defines a funciton that divides all elements of a matrix ``def matrix_divided(matrix, div)``

Usage
=====

``def matrix_divided(...)`` returns a new matrix from division

Test cases for the matrix_divided function
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> matrix = [
...	[1, 2, 3],
...	[4, 5, 6],
...	[7, 8, 9]
... ]
>>> div = 2
>>> print(matrix_divided(matrix, div))
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0], [3.5, 4.0, 4.5]]

>>> matrix = [
...     [0, 0, 0],
...     [0, 0, 0],
...     [0, 0, 0]
... ]
>>> div = 7
>>> print(matrix_divided(matrix, div))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

>>> matrix = [
...     [-1, -2, -3],
...     [-4, -5, -6],
...     [-7, -8, -9]
... ]
>>> div = 5
>>> print(matrix_divided(matrix, div))
[[-0.2, -0.4, -0.6], [-0.8, -1.0, -1.2], [-1.4, -1.6, -1.8]]

>>> matrix = [[7, 8, 9]]
>>> div = 2
>>> print(matrix_divided(matrix, div))
[[3.5, 4.0, 4.5]]

>>> matrix = [[4], [5], [6]]
>>> div = 2
>>> print(matrix_divided(matrix, div))
[[2.0], [2.5], [3.0]]

#division by 0
>>> matrix = [
...     [-1, -2, -3],
...     [-4, -5, -6],
...     [-7, -8, -9]
... ]
>>> div = 0
>>> matrix_divided(matrix, div)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

#element in list is not a integer or float
>>> matrix = [[1, 'p'], [3, 4]]
>>> div = 4
>>> matrix_divided(matrix, div)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers or floats

#division by a None numeric div
>>> matrix = [[4], [5], [6]]
>>> div = '2'
>>> print(matrix_divided(matrix, div))
Traceback (most recent call last):
...
TypeError: div must be a number (integer or float)
